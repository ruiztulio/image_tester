#!/usr/bin/python
"""Usage: clone_oca_dependencies [<checkout_dir> <build_dir>]

Arguments:

deps_checkout_dir: the directory in which the dependency repositories
will be cloned
build_dir: the directory in which the tested repositories have been cloned

If no arguments are provided, default to the layout used in the OCA travis
configuration.

The program will process the file oca_dependencies.txt at the root of the
tested repository, and clone the dependency repositories in checkout_dir,
before recursively processing the oca_dependencies.txt files of the
dependencies.

The expected format for oca_dependencies.txt:

* comment lines start with # and are ignored
* a dependency line contains:
  - the name of the OCA project
  - (optional) the URL to the git repository (defaulting to the OCA repository)
  - (optional) the name of the branch to use (defaulting to ${VERSION})
"""
from __future__ import print_function
import sys
import os
import os.path as osp
import subprocess
import logging
import requirements


_logger = logging.getLogger()


def parse_depfile(depfile, owner='OCA'):
    deps = []
    for line in depfile:
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        parts = line.split()
        repo = parts[0]
        if len(parts) > 2:
            branch = parts[2]
        else:
            branch = os.environ.get('VERSION', '8.0')
        if len(parts) > 1:
            url = parts[1]
        else:
            url = 'https://github.com/%s/%s.git' % (owner, repo)
        deps.append((repo, url, branch))
    return deps


def git_checkout(deps_checkout_dir, reponame, url, branch):
    checkout_dir = osp.join(deps_checkout_dir, reponame)
    if not osp.isdir(checkout_dir):
        command = ['git', 'clone', '-q', url, '-b', branch, checkout_dir]
        _logger.info('Calling %s', ' '.join(command))
        subprocess.check_call(command)
    return checkout_dir


def gen_pip_deps(reqfilenames, dest_dir):
    deps = dict()
    for reqfilename in reqfilenames:
        with open(reqfilename, 'r') as req_file:
            line = req_file.readline()


        command = ['pip', 'install', '-r', reqfilename]


def gt(first, second):
    if not first.specs:
        return True
    if not second.specs:
        return False
    return first.specs[0][1] > second.specs[0][1]


def load_deps(filename):
    reqs = dict()
    with open(filename, 'r') as req_file:
        line = req_file.readline()
        for req in requirements.parse(line):
            reqs.update({req.name: req})
    return reqs


def save_requirements(requirementstxt, filename):
    if osp.isfile(filename):
        fullreqs = load_deps(filename)
    else:
        fullreqs = dict()
    reqs = load_deps(requirementstxt)
    for name, req in reqs.iteritems():
        if req.name not in fullreqs or gt(req, fullreqs.get(req.name)):
            fullreqs.update({req.name: req})

    with open(filename, 'w') as req_file:
        for name, req in fullreqs.iteritems():
            if req.specs:
                line = '{name}{req}{version}\n'.format(
                    name=name,
                    req=req.specs[0][0],
                    version=req.specs[0][1]
                )
            else:
                line = '{name}\n'.format(name=name)
            req_file.write(line)


def run(deps_checkout_dir, build_dir):
    dependencies = []
    processed = set()
    depfilename = osp.join(build_dir, 'oca_dependencies.txt')
    dependencies.append(depfilename)
    reqfilenames = []
    if osp.isfile(osp.join(build_dir, 'requirements.txt')):
        reqfilenames.append(osp.join(build_dir, 'requirements.txt'))
    for repo in os.listdir(deps_checkout_dir):
        _logger.info('examining %s', repo)
        processed.add(repo)
        depfilename = osp.join(deps_checkout_dir, repo, 'oca_dependencies.txt')
        dependencies.append(depfilename)
        reqfilename = osp.join(deps_checkout_dir, repo, 'requirements.txt')
        if osp.isfile(reqfilename):
            reqfilenames.append(reqfilename)
    for depfilename in dependencies:
        try:
            with open(depfilename) as depfile:
                deps = parse_depfile(depfile)
        except IOError:
            deps = []
        for depname, url, branch in deps:
            _logger.info('* processing %s', depname)
            if depname in processed:
                continue
            processed.add(depname)
            checkout_dir = git_checkout(deps_checkout_dir, depname,
                                        url, branch)
            new_dep_filename = osp.join(checkout_dir, 'oca_dependencies.txt')
            reqfilename = osp.join(checkout_dir, 'requirements.txt')
            if osp.isfile(reqfilename):
                reqfilenames.append(reqfilename)
            if new_dep_filename not in dependencies:
                dependencies.append(new_dep_filename)

    for reqfilename in reqfilenames:
        save_requirements(reqfilename, os.path.join(build_dir, 'full_requirements.txt'))


                    # for reqfilename in reqfilenames:
    #     command = ['pip', 'install', '-r', reqfilename]
    #     _logger.info('Calling %s', ' '.join(command))
    #     subprocess.check_call(command)


if __name__ == '__main__':
    if len(sys.argv) == 1:
        deps_checkout_dir = osp.join(os.environ['HOME'], 'dependencies')
        if not osp.exists(deps_checkout_dir):
            os.makedirs(deps_checkout_dir)
        build_dir = os.environ['TRAVIS_BUILD_DIR']
    elif len(sys.argv) == 2 or len(sys.argv) > 3:
        print(__doc__)
        sys.exit(1)
    else:
        deps_checkout_dir = sys.argv[1]
        build_dir = sys.argv[2]
    run(deps_checkout_dir, build_dir)

